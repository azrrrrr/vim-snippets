snippet #!
	#!/usr/bin/env python
	# -*- coding: utf-8 -*-
snippet imp
	import ${0:module}
snippet uni
	def __unicode__(self):
		${0:representation}
snippet from
	from ${1:package} import ${0:module}
# Module Docstring
snippet docs
	"""
	File: ${1:`vim_snippets#Filename('$1.py', 'foo.py')`}
	Author: `g:snips_author`
	Email: `g:snips_email`
	Github: `g:snips_github`
	Description: ${0}
	"""

snippet wh
	while ${1:condition}:
		${0}
# dowh - does the same as do...while in other languages
snippet dowh
	while True:
		${1}
		if ${0:condition}:
			break
snippet with
	with ${1:expr} as ${2:var}:
		${0}
# New Class
snippet cl
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${0}
# New Function
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${0}
snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${0}
# New Method
snippet defs
	def ${1:mname}(self, ${2:arg}):
		${0}
# New Property
snippet property
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
		def fdel(self):
			${0:del self._$1}
		return locals()
	$1 = property(**$1())
# Ifs
snippet if
	if ${1:condition}:
		${0}
snippet el
	else:
		${0}
snippet ei
	elif ${1:condition}:
		${0}
# For
snippet for
	for ${1:item} in ${2:items}:
		${0}
# Encodes
snippet cutf8
	# -*- coding: utf-8 -*-
snippet clatin1
	# -*- coding: latin-1 -*-
snippet cascii
	# -*- coding: ascii -*-
# Lambda
snippet ld
	${1:var} = lambda ${2:vars} : ${0:action}
snippet .
	self.
snippet try Try/Except
	try:
		${1}
	except ${2:Exception}, ${3:e}:
		${0:raise $3}
snippet try Try/Except/Else
	try:
		${1}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${0}
snippet try Try/Except/Finally
	try:
		${1}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${0}
snippet try Try/Except/Else/Finally
	try:
		${1}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5}
	finally:
		${0}
# if __name__ == '__main__':
snippet ifmain
	if __name__ == '__main__':
		${0:main()}
# __magic__
snippet _
	__${1:init}__
# python debugger (pdb)
snippet pdb
	import pdb; pdb.set_trace()
# ipython debugger (ipdb)
snippet ipdb
	import ipdb; ipdb.set_trace()
# embed ipython itself
snippet iem
	import IPython; IPython.embed()
# ipython debugger (pdbbb)
snippet pdbbb
	import pdbpp; pdbpp.set_trace()
# remote python debugger (rpdb)
snippet rpdb
	import rpdb; rpdb.set_trace()
# python_prompt_toolkit
snippet ppt
	from prompt_toolkit.contrib.repl import embed
	embed(globals(), locals(), vi_mode=${1:default=False}, history_filename=${2:default=None})
# python console debugger (pudb)
snippet pudb
	import pudb; pudb.set_trace()
snippet pprint
	import pprint; pprint.pprint(${1})
snippet "
	"""
	${0:doc}
	"""
# assertions
snippet a=
	self.assertEqual(${0}, ${1})
# test function/method
snippet test
	def test_${1:description}(${2:`indent('.') ? 'self' : ''`}):
		${0}
# test case
snippet testcase
	class ${1:ExampleCase}(unittest.TestCase):

		def test_${2:description}(self):
			${0}
snippet fut
	from __future__ import ${0}
#getopt
snippet getopt
	try:
		# Short option syntax: "hv:"
		# Long option syntax: "help" or "verbose="
		opts, args = getopt.getopt(sys.argv[1:], "${1:short_options}", [${2:long_options}])

	except getopt.GetoptError, err:
		# Print debug info
		print str(err)
		${3:error_action}

	for option, argument in opts:
		if option in ("-h", "--help"):
			${0}
		elif option in ("-v", "--verbose"):
			verbose = argument
# logging
# glog = get log
snippet glog
	import logging
	logger = logging.getLogger(${0:__name__})
snippet le
	logger.error(${0:msg})
# conflict with lambda=ld, therefor we change into Logger.debuG
snippet lg
	logger.debug(${0:msg})
snippet lw
	logger.warning(${0:msg})
snippet lc
	logger.critical(${0:msg})
snippet li
	logger.info(${0:msg})
snippet epydoc
	"""
	${1:Description}

	@param ${2:param}: ${3: Description}
	@type  $2: ${4: Type}

	@return: ${5: Description}
	@rtype : ${6: Type}

	@raise e: ${0: Description}
	"""
snippet dol
	def ${1:__init__}(self, *args, **kwargs):
	    super(${0:ClassName}, self).$1(*args, **kwargs)
snippet kwg
	self.${1:var_name} = kwargs.get('$1', ${2:None})
snippet lkwg
	${1:var_name} = kwargs.get('$1', ${2:None})
snippet args
	*args${1:,}${0}
snippet kwargs
	**kwargs${1:,}${0}
snippet akw
	*args, **kwargs${1:,}${0}


snippet target
	python_binary (
	  name = "adstats_loadtest",
	  main_module = "admarket.adstats.scripts.loadtest.adstats_loadtest",
	  srcs = [
		"adstats_loadtest.py",
		"testdata.py",
	  ],
	  deps = [
		":stats",
		"@/admarket/libadmarket/if:python",
		"@/admarket/adstats/if:python",
		"@/thrift/lib/py",
	  ],
	)

	python_library (
	  name = "stats",
	  srcs = [
		"stats.py"
	  ],
	)

	python_unittest(
	  name="stats_tests-py2",
	  py_version="<3",
	  srcs=[
		"stats_tests.py",
	  ],
	  deps=[
		"@/libfb/py:testutil",
		":stats",
	  ],
	  needed_coverage=[
		(0.86, '@/:admarket/adstats/stats'),
	  ],
	)

snippet smc
	from ServiceRouter import (ServiceRouter, TServiceRouterException)
	from tutorials.thrift.ChatRoomService import (ChatRoomService, ttypes)
	from tutorials.thrift.ChatRoomService.ttypes import *

	def main():
		sr = ServiceRouter()
		try:
			client = sr.getClient2(ChatRoomService.Client,
								   "tutorial.ChatRoomService.lab")

			# Send a message
			sendRequest = ChatRoomServiceSendMessageRequest()
			client.sendMessage(sendRequest)

			# Get all the messages
			getRequest = ChatRoomServiceGetMessagesRequest()
			response = client.getMessages(getRequest)
			for messagesList in response.messages:
				print("Message: ", messagesList.message,
					  " Sender: ", messagesList.sender)
		except TServiceRouterException as e:
			print("Request failed: ", e.message)

snippet thread
	child_threads = []
    task_queue = TaskQueue()

    # The AgentServerThread needs to have a reference to the LauncherThread
    # so that thrift server calls can query the status of individual running
    # child-threads.
    launcher_t = LauncherThread(task_queue=task_queue, mode='db')
    child_threads.append(launcher_t)
    child_threads.append(ast_t)
    child_threads.append(BackupLogThread())
    child_threads.append(SurveyorThread(mode='db'))
    child_threads.append(StatsThread(task_queue=task_queue))
    child_threads.append(JanitorThread())

	for t in child_threads:
		if not t.is_alive():
			t.start()

    while len(child_threads):
        # We don't need to check threads that often, unless we're shutting down
        stop.wait(timeout=30)

        # Keep an eye on all our threads
        for t in child_threads[:]:
            if stop.is_set():
                t.stop(stop_hard)

            if not t.is_alive():
                if t.exception:
                    msg = 'Thread %s exited unexpectedly. Reason %s' % (t.name,
                          t.exception)
                    log.error(msg)
                    raise Exception(msg)
                else:
                    # Clean exit, shutting down
                    child_threads.remove(t)

        log.debug('All %d child threads are running', len(child_threads))
        if not stop.is_set() and not thriftIsAlive():
            log.warning('Thrift server unresponsive to periodic check')

